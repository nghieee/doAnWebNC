using web_ban_thuoc.Models;

namespace web_ban_thuoc.Services
{
    public interface IOrderEmailService
    {
        Task SendOrderConfirmationEmailAsync(OrderConfirmationEmail orderData);
        Task SendPaymentSuccessEmailAsync(OrderConfirmationEmail orderData);
        Task SendPaymentFailedEmailAsync(OrderConfirmationEmail orderData);
    }

    public class OrderEmailService : IOrderEmailService
    {
        private readonly IEmailSender _emailSender;
        private readonly ILogger<OrderEmailService> _logger;

        public OrderEmailService(IEmailSender emailSender, ILogger<OrderEmailService> logger)
        {
            _emailSender = emailSender;
            _logger = logger;
        }

        public async Task SendOrderConfirmationEmailAsync(OrderConfirmationEmail orderData)
        {
            try
            {
                var subject = $"X√°c nh·∫≠n ƒë∆°n h√†ng #{orderData.OrderCode} - Nh√† Thu·ªëc Long Ch√¢u";
                var htmlBody = GenerateOrderConfirmationEmailHtml(orderData);

                await _emailSender.SendEmailAsync(orderData.CustomerEmail, subject, htmlBody);
                _logger.LogInformation($"Order confirmation email sent to {orderData.CustomerEmail} for order {orderData.OrderCode}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error sending order confirmation email for order {orderData.OrderCode}");
            }
        }

        public async Task SendPaymentSuccessEmailAsync(OrderConfirmationEmail orderData)
        {
            try
            {
                var subject = $"Thanh to√°n th√†nh c√¥ng - ƒê∆°n h√†ng #{orderData.OrderCode}";
                var htmlBody = GeneratePaymentSuccessEmailHtml(orderData);

                await _emailSender.SendEmailAsync(orderData.CustomerEmail, subject, htmlBody);
                _logger.LogInformation($"Payment success email sent to {orderData.CustomerEmail} for order {orderData.OrderCode}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error sending payment success email for order {orderData.OrderCode}");
            }
        }

        public async Task SendPaymentFailedEmailAsync(OrderConfirmationEmail orderData)
        {
            try
            {
                var subject = $"Thanh to√°n th·∫•t b·∫°i - ƒê∆°n h√†ng #{orderData.OrderCode}";
                var htmlBody = GeneratePaymentFailedEmailHtml(orderData);

                await _emailSender.SendEmailAsync(orderData.CustomerEmail, subject, htmlBody);
                _logger.LogInformation($"Payment failed email sent to {orderData.CustomerEmail} for order {orderData.OrderCode}");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error sending payment failed email for order {orderData.OrderCode}");
            }
        }

        private string GenerateOrderConfirmationEmailHtml(OrderConfirmationEmail orderData)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <title>X√°c nh·∫≠n ƒë∆°n h√†ng</title>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: #007bff; color: white; padding: 20px; text-align: center; }}
        .content {{ padding: 20px; background: #f8f9fa; }}
        .order-info {{ background: white; padding: 20px; margin: 20px 0; border-radius: 5px; }}
        .item {{ border-bottom: 1px solid #eee; padding: 10px 0; }}
        .total {{ font-weight: bold; font-size: 18px; color: #007bff; }}
        .footer {{ text-align: center; padding: 20px; color: #666; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üéâ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!</h1>
            <p>Nh√† Thu·ªëc Long Ch√¢u</p>
        </div>
        
        <div class='content'>
            <h2>C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng!</h2>
            <p>Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c ƒë∆°n h√†ng c·ªßa b·∫°n v√† s·∫Ω x·ª≠ l√Ω trong th·ªùi gian s·ªõm nh·∫•t.</p>
            
            <div class='order-info'>
                <h3>üìã Th√¥ng tin ƒë∆°n h√†ng</h3>
                <p><strong>M√£ ƒë∆°n h√†ng:</strong> #{orderData.OrderCode}</p>
                <p><strong>Ng√†y ƒë·∫∑t:</strong> {orderData.OrderDate:dd/MM/yyyy HH:mm}</p>
                <p><strong>Ph∆∞∆°ng th·ª©c thanh to√°n:</strong> {orderData.PaymentMethod}</p>
                
                <h4>üë§ Th√¥ng tin kh√°ch h√†ng</h4>
                <p><strong>H·ªç t√™n:</strong> {orderData.CustomerName}</p>
                <p><strong>Email:</strong> {orderData.CustomerEmail}</p>
                <p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {orderData.CustomerPhone}</p>
                <p><strong>ƒê·ªãa ch·ªâ:</strong> {orderData.ShippingAddress}</p>
                
                <h4>üì¶ Chi ti·∫øt s·∫£n ph·∫©m</h4>
                {GenerateOrderItemsHtml(orderData.OrderItems)}
                
                <div class='total'>
                    <p><strong>T·ªïng c·ªông: {orderData.TotalAmount:N0} VNƒê</strong></p>
                    {(orderData.VoucherDiscount > 0 ? $"<p><em>Gi·∫£m gi√° ({orderData.VoucherCode}): -{orderData.VoucherDiscount:N0} VNƒê</em></p>" : "")}
                </div>
            </div>
            
            <p>Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm nh·∫•t ƒë·ªÉ x√°c nh·∫≠n v√† giao h√†ng.</p>
        </div>
        
        <div class='footer'>
            <p>¬© 2024 Nh√† Thu·ªëc Long Ch√¢u. All rights reserved.</p>
        </div>
    </div>
</body>
</html>";
        }

        private string GeneratePaymentSuccessEmailHtml(OrderConfirmationEmail orderData)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <title>Thanh to√°n th√†nh c√¥ng</title>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: #28a745; color: white; padding: 20px; text-align: center; }}
        .content {{ padding: 20px; background: #f8f9fa; }}
        .success-message {{ background: #d4edda; border: 1px solid #c3e6cb; padding: 15px; border-radius: 5px; margin: 20px 0; }}
        .order-info {{ background: white; padding: 20px; margin: 20px 0; border-radius: 5px; }}
        .footer {{ text-align: center; padding: 20px; color: #666; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>‚úÖ Thanh to√°n th√†nh c√¥ng!</h1>
            <p>Nh√† Thu·ªëc Long Ch√¢u</p>
        </div>
        
        <div class='content'>
            <div class='success-message'>
                <h3>üéâ Ch√∫c m·ª´ng! Thanh to√°n c·ªßa b·∫°n ƒë√£ th√†nh c√¥ng.</h3>
                <p>ƒê∆°n h√†ng #{orderData.OrderCode} ƒë√£ ƒë∆∞·ª£c thanh to√°n th√†nh c√¥ng v√† ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.</p>
            </div>
            
            <div class='order-info'>
                <h3>üìã Th√¥ng tin giao d·ªãch</h3>
                <p><strong>M√£ ƒë∆°n h√†ng:</strong> #{orderData.OrderCode}</p>
                <p><strong>Ng√†y thanh to√°n:</strong> {DateTime.Now:dd/MM/yyyy HH:mm}</p>
                <p><strong>S·ªë ti·ªÅn:</strong> {orderData.TotalAmount:N0} VNƒê</p>
                <p><strong>Ph∆∞∆°ng th·ª©c:</strong> {orderData.PaymentMethod}</p>
            </div>
            
            <p>Ch√∫ng t√¥i s·∫Ω giao h√†ng ƒë·∫øn ƒë·ªãa ch·ªâ b·∫°n ƒë√£ cung c·∫•p trong th·ªùi gian s·ªõm nh·∫•t.</p>
            <p>B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi h√†ng ƒë∆∞·ª£c giao.</p>
        </div>
        
        <div class='footer'>
            <p>¬© 2024 Nh√† Thu·ªëc Long Ch√¢u. All rights reserved.</p>
        </div>
    </div>
</body>
</html>";
        }

        private string GeneratePaymentFailedEmailHtml(OrderConfirmationEmail orderData)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <title>Thanh to√°n th·∫•t b·∫°i</title>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: #dc3545; color: white; padding: 20px; text-align: center; }}
        .content {{ padding: 20px; background: #f8f9fa; }}
        .error-message {{ background: #f8d7da; border: 1px solid #f5c6cb; padding: 15px; border-radius: 5px; margin: 20px 0; }}
        .order-info {{ background: white; padding: 20px; margin: 20px 0; border-radius: 5px; }}
        .footer {{ text-align: center; padding: 20px; color: #666; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>‚ùå Thanh to√°n th·∫•t b·∫°i</h1>
            <p>Nh√† Thu·ªëc Long Ch√¢u</p>
        </div>
        
        <div class='content'>
            <div class='error-message'>
                <h3>R·∫•t ti·∫øc! Thanh to√°n c·ªßa b·∫°n kh√¥ng th√†nh c√¥ng.</h3>
                <p>ƒê∆°n h√†ng #{orderData.OrderCode} ch∆∞a ƒë∆∞·ª£c thanh to√°n.</p>
            </div>
            
            <div class='order-info'>
                <h3>üìã Th√¥ng tin ƒë∆°n h√†ng</h3>
                <p><strong>M√£ ƒë∆°n h√†ng:</strong> #{orderData.OrderCode}</p>
                <p><strong>S·ªë ti·ªÅn:</strong> {orderData.TotalAmount:N0} VNƒê</p>
                <p><strong>Ph∆∞∆°ng th·ª©c:</strong> {orderData.PaymentMethod}</p>
            </div>
            
            <h4>üîÑ C√°c b∆∞·ªõc ti·∫øp theo:</h4>
            <ul>
                <li>Ki·ªÉm tra l·∫°i th√¥ng tin th·∫ª ho·∫∑c t√†i kho·∫£n</li>
                <li>Th·ª≠ thanh to√°n l·∫°i v·ªõi ph∆∞∆°ng th·ª©c kh√°c</li>
                <li>Li√™n h·ªá h·ªó tr·ª£ n·∫øu c·∫ßn thi·∫øt</li>
            </ul>
            
            <p>B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n ƒë·ªÉ th·ª≠ thanh to√°n l·∫°i.</p>
        </div>
        
        <div class='footer'>
            <p>¬© 2024 Nh√† Thu·ªëc Long Ch√¢u. All rights reserved.</p>
        </div>
    </div>
</body>
</html>";
        }

        private string GenerateOrderItemsHtml(List<OrderItem> items)
        {
            var html = "";
            foreach (var item in items)
            {
                html += $@"
                <div class='item'>
                    <p><strong>{item.Product?.ProductName}</strong></p>
                    <p>S·ªë l∆∞·ª£ng: {item.Quantity} x {item.Price:N0} VNƒê</p>
                    <p>Th√†nh ti·ªÅn: {(item.Price * item.Quantity):N0} VNƒê</p>
                </div>";
            }
            return html;
        }

        private string GenerateOrderConfirmationEmailText(OrderConfirmationEmail orderData)
        {
            return $@"
X√ÅC NH·∫¨N ƒê∆†N H√ÄNG - NH√Ä THU·ªêC LONG CH√ÇU

C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng!

Th√¥ng tin ƒë∆°n h√†ng:
- M√£ ƒë∆°n h√†ng: #{orderData.OrderCode}
- Ng√†y ƒë·∫∑t: {orderData.OrderDate:dd/MM/yyyy HH:mm}
- Ph∆∞∆°ng th·ª©c thanh to√°n: {orderData.PaymentMethod}

Th√¥ng tin kh√°ch h√†ng:
- H·ªç t√™n: {orderData.CustomerName}
- Email: {orderData.CustomerEmail}
- S·ªë ƒëi·ªán tho·∫°i: {orderData.CustomerPhone}
- ƒê·ªãa ch·ªâ: {orderData.ShippingAddress}

Chi ti·∫øt s·∫£n ph·∫©m:
{GenerateOrderItemsText(orderData.OrderItems)}

T·ªïng c·ªông: {orderData.TotalAmount:N0} VNƒê
{(orderData.VoucherDiscount > 0 ? $"Gi·∫£m gi√° ({orderData.VoucherCode}): -{orderData.VoucherDiscount:N0} VNƒê" : "")}

Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm nh·∫•t ƒë·ªÉ x√°c nh·∫≠n v√† giao h√†ng.

¬© 2024 Nh√† Thu·ªëc Long Ch√¢u";
        }

        private string GeneratePaymentSuccessEmailText(OrderConfirmationEmail orderData)
        {
            return $@"
THANH TO√ÅN TH√ÄNH C√îNG - NH√Ä THU·ªêC LONG CH√ÇU

Ch√∫c m·ª´ng! Thanh to√°n c·ªßa b·∫°n ƒë√£ th√†nh c√¥ng.

Th√¥ng tin giao d·ªãch:
- M√£ ƒë∆°n h√†ng: #{orderData.OrderCode}
- Ng√†y thanh to√°n: {DateTime.Now:dd/MM/yyyy HH:mm}
- S·ªë ti·ªÅn: {orderData.TotalAmount:N0} VNƒê
- Ph∆∞∆°ng th·ª©c: {orderData.PaymentMethod}

Ch√∫ng t√¥i s·∫Ω giao h√†ng ƒë·∫øn ƒë·ªãa ch·ªâ b·∫°n ƒë√£ cung c·∫•p trong th·ªùi gian s·ªõm nh·∫•t.

¬© 2024 Nh√† Thu·ªëc Long Ch√¢u";
        }

        private string GeneratePaymentFailedEmailText(OrderConfirmationEmail orderData)
        {
            return $@"
THANH TO√ÅN TH·∫§T B·∫†I - NH√Ä THU·ªêC LONG CH√ÇU

R·∫•t ti·∫øc! Thanh to√°n c·ªßa b·∫°n kh√¥ng th√†nh c√¥ng.

Th√¥ng tin ƒë∆°n h√†ng:
- M√£ ƒë∆°n h√†ng: #{orderData.OrderCode}
- S·ªë ti·ªÅn: {orderData.TotalAmount:N0} VNƒê
- Ph∆∞∆°ng th·ª©c: {orderData.PaymentMethod}

C√°c b∆∞·ªõc ti·∫øp theo:
1. Ki·ªÉm tra l·∫°i th√¥ng tin th·∫ª ho·∫∑c t√†i kho·∫£n
2. Th·ª≠ thanh to√°n l·∫°i v·ªõi ph∆∞∆°ng th·ª©c kh√°c
3. Li√™n h·ªá h·ªó tr·ª£ n·∫øu c·∫ßn thi·∫øt

B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v√†o t√†i kho·∫£n ƒë·ªÉ th·ª≠ thanh to√°n l·∫°i.

¬© 2024 Nh√† Thu·ªëc Long Ch√¢u";
        }

        private string GenerateOrderItemsText(List<OrderItem> items)
        {
            var text = "";
            foreach (var item in items)
            {
                text += $"- {item.Product?.ProductName}: {item.Quantity} x {item.Price:N0} VNƒê = {(item.Price * item.Quantity):N0} VNƒê\n";
            }
            return text;
        }
    }
} 